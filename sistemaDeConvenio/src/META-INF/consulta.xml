<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">
	
	<!--A tag <named-query> serve para a criação de uma consulta que terá um nome e poderá ser chamada, assim caso você precise fazer essa mesma consulta várias vezes, não
	irá precisar reescrevê-la várias vezes para servir de parâmetro para criar as TypedQuery's. A consulta é feita com JPQL-->
	<named-query name="getEmployeeByName">
		<query>
		<!---->
			select f from Funcionario f where f.nome like :nomeParametro
		</query>
	</named-query>
	
	
	<!--Definindo uma consulta nativa em sql, o atributo result-set-mapping deve apontar para o mapeamento correto preenchendo o atributo com o nome da tag de mapeamento,
	neste caso a tag <sql-result-set-mapping>. A diferença entre <named-query> e <named-native-query> é que esta última usa sql e precisa ser mapeada para uma classe que irá
	receber o resultado da consulta. Isso acontece porque nem toda classe precisa ser uma entidade, algumas vezes, ter uma classe para guardar resultados de consulta é bem
	útil para a criação de relatórios. -->
	<named-native-query name="obterQuantidadeFuncionarios" result-set-mapping="quantidadeFuncionariosMap">
	<!--A tag <query> serve para guardar a query propriamente dita-->
		<query>
			select count(id) as quantidadeFuncionarios from funcionarios
		</query>
	</named-native-query>

	<!--Definindo o mapeamento-->
	<sql-result-set-mapping name="quantidadeFuncionariosMap">
	<!--Definindo a classe alvo que guarduará o retorno da consulta nativa em sql-->
		<constructor-result target-class="modelo.QuantidadeFuncionarios">
		<!--O valor do atributo name deve ser o nome da coluna ou do alias, e o tipo deve ser o mesmo do atributo na classe java mapeada, no caso: java.lang.Integer-->
			<column name="quantidadeFuncionarios" class="java.lang.Integer" /> 
		</constructor-result>
	</sql-result-set-mapping>
	
</entity-mappings>